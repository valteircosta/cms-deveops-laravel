# O docker-compose versão 3  é mais avançado e superior em integração
# com swarm,kubernetes etc
version: "3"

services:
  app:
    # Indica ao caminho do arquivo de construção Dockerfile
    build: .
    container_name: app
    # Passando params para dockerize copy tamplate, aguarda conexão db e rodar script entrypoint.sh
    entrypoint: dockerize -template ./.docker/app/.env:.env -wait tcp://db:3306 -timeout 50s ./.docker/entrypoint.sh
    # valor da variáveis p/ template
    environment:
      - DB_HOST=db
      - DB_DATABASE=laravel
      - DB_USERNAME=root
      - DB_PASSWORD=root
    volumes:
      - .:/var/www
    #Rede a qual perrence o containner
    networks:
      - app-network
    #Aqui agora apenas garante a ordem de criação dos serviços
    depends_on:
      - db
      - redis

  nginx:
    # Indica ao caminho do arquivo de construção Dockerfile
    build: .docker/nginx
    # Nome do container
    container_name: nginx
    # Reiniciar caso o container cair
    restart: always
    # Libera a entrada de forma interativa no container (bash e outros,)
    tty: true
    ports:
      - "8080:80"
    volumes:
      - .:/var/www
    networks:
      - app-network
    # O nfinx será criado depois do app
    depends_on:
      - app

  db:
    image: mysql:5.7
    # Comando que evita erros (Se não usar é muito choro e ranger de dentes para o programador)
    command: --innodb-use-native-aio=0
    container_name: db
    restart: always
    tty: true
    ports:
      - "3306:3306"
    # Volume do banco de dados
    volumes:
      - ./.docker/db/mysql:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=laravel
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=root
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    expose:
      - 6379
    networks:
      - app-network

#Construção da rede
networks:
  # Nome e configuração da rede
  app-network:
    driver: bridge
